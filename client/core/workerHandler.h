/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef workerHandler_H
#define workerHandler_H

#include <thrift/TDispatchProcessor.h>
#include "workercontroller_types.h"

namespace workercontroller {

class workerHandlerIf {
 public:
  virtual ~workerHandlerIf() {}
  virtual int32_t ping() = 0;
  virtual void getLog(std::string& _return, const std::string& filename, const int32_t type, const std::string& lines) = 0;
  virtual int32_t isFileExist(const std::string& filename) = 0;
  virtual int32_t startNotifier(const std::string& filename) = 0;
};

class workerHandlerIfFactory {
 public:
  typedef workerHandlerIf Handler;

  virtual ~workerHandlerIfFactory() {}

  virtual workerHandlerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(workerHandlerIf* /* handler */) = 0;
};

class workerHandlerIfSingletonFactory : virtual public workerHandlerIfFactory {
 public:
  workerHandlerIfSingletonFactory(const boost::shared_ptr<workerHandlerIf>& iface) : iface_(iface) {}
  virtual ~workerHandlerIfSingletonFactory() {}

  virtual workerHandlerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(workerHandlerIf* /* handler */) {}

 protected:
  boost::shared_ptr<workerHandlerIf> iface_;
};

class workerHandlerNull : virtual public workerHandlerIf {
 public:
  virtual ~workerHandlerNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void getLog(std::string& /* _return */, const std::string& /* filename */, const int32_t /* type */, const std::string& /* lines */) {
    return;
  }
  int32_t isFileExist(const std::string& /* filename */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t startNotifier(const std::string& /* filename */) {
    int32_t _return = 0;
    return _return;
  }
};


class workerHandler_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  workerHandler_ping_args() {
  }

  virtual ~workerHandler_ping_args() throw() {}


  bool operator == (const workerHandler_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const workerHandler_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workerHandler_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class workerHandler_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~workerHandler_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _workerHandler_ping_result__isset {
  _workerHandler_ping_result__isset() : success(false) {}
  bool success;
} _workerHandler_ping_result__isset;

class workerHandler_ping_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  workerHandler_ping_result() : success(0) {
  }

  virtual ~workerHandler_ping_result() throw() {}

  int32_t success;

  _workerHandler_ping_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const workerHandler_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const workerHandler_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workerHandler_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _workerHandler_ping_presult__isset {
  _workerHandler_ping_presult__isset() : success(false) {}
  bool success;
} _workerHandler_ping_presult__isset;

class workerHandler_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~workerHandler_ping_presult() throw() {}

  int32_t* success;

  _workerHandler_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _workerHandler_getLog_args__isset {
  _workerHandler_getLog_args__isset() : filename(false), type(false), lines(false) {}
  bool filename;
  bool type;
  bool lines;
} _workerHandler_getLog_args__isset;

class workerHandler_getLog_args {
 public:

  static const char* ascii_fingerprint; // = "70563A0628F75DF9555F4D24690B1E26";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x56,0x3A,0x06,0x28,0xF7,0x5D,0xF9,0x55,0x5F,0x4D,0x24,0x69,0x0B,0x1E,0x26};

  workerHandler_getLog_args() : filename(), type(0), lines() {
  }

  virtual ~workerHandler_getLog_args() throw() {}

  std::string filename;
  int32_t type;
  std::string lines;

  _workerHandler_getLog_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_lines(const std::string& val) {
    lines = val;
  }

  bool operator == (const workerHandler_getLog_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(lines == rhs.lines))
      return false;
    return true;
  }
  bool operator != (const workerHandler_getLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workerHandler_getLog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class workerHandler_getLog_pargs {
 public:

  static const char* ascii_fingerprint; // = "70563A0628F75DF9555F4D24690B1E26";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x56,0x3A,0x06,0x28,0xF7,0x5D,0xF9,0x55,0x5F,0x4D,0x24,0x69,0x0B,0x1E,0x26};


  virtual ~workerHandler_getLog_pargs() throw() {}

  const std::string* filename;
  const int32_t* type;
  const std::string* lines;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _workerHandler_getLog_result__isset {
  _workerHandler_getLog_result__isset() : success(false) {}
  bool success;
} _workerHandler_getLog_result__isset;

class workerHandler_getLog_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  workerHandler_getLog_result() : success() {
  }

  virtual ~workerHandler_getLog_result() throw() {}

  std::string success;

  _workerHandler_getLog_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const workerHandler_getLog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const workerHandler_getLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workerHandler_getLog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _workerHandler_getLog_presult__isset {
  _workerHandler_getLog_presult__isset() : success(false) {}
  bool success;
} _workerHandler_getLog_presult__isset;

class workerHandler_getLog_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~workerHandler_getLog_presult() throw() {}

  std::string* success;

  _workerHandler_getLog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _workerHandler_isFileExist_args__isset {
  _workerHandler_isFileExist_args__isset() : filename(false) {}
  bool filename;
} _workerHandler_isFileExist_args__isset;

class workerHandler_isFileExist_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  workerHandler_isFileExist_args() : filename() {
  }

  virtual ~workerHandler_isFileExist_args() throw() {}

  std::string filename;

  _workerHandler_isFileExist_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  bool operator == (const workerHandler_isFileExist_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const workerHandler_isFileExist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workerHandler_isFileExist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class workerHandler_isFileExist_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~workerHandler_isFileExist_pargs() throw() {}

  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _workerHandler_isFileExist_result__isset {
  _workerHandler_isFileExist_result__isset() : success(false) {}
  bool success;
} _workerHandler_isFileExist_result__isset;

class workerHandler_isFileExist_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  workerHandler_isFileExist_result() : success(0) {
  }

  virtual ~workerHandler_isFileExist_result() throw() {}

  int32_t success;

  _workerHandler_isFileExist_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const workerHandler_isFileExist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const workerHandler_isFileExist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workerHandler_isFileExist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _workerHandler_isFileExist_presult__isset {
  _workerHandler_isFileExist_presult__isset() : success(false) {}
  bool success;
} _workerHandler_isFileExist_presult__isset;

class workerHandler_isFileExist_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~workerHandler_isFileExist_presult() throw() {}

  int32_t* success;

  _workerHandler_isFileExist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _workerHandler_startNotifier_args__isset {
  _workerHandler_startNotifier_args__isset() : filename(false) {}
  bool filename;
} _workerHandler_startNotifier_args__isset;

class workerHandler_startNotifier_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  workerHandler_startNotifier_args() : filename() {
  }

  virtual ~workerHandler_startNotifier_args() throw() {}

  std::string filename;

  _workerHandler_startNotifier_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  bool operator == (const workerHandler_startNotifier_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const workerHandler_startNotifier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workerHandler_startNotifier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class workerHandler_startNotifier_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~workerHandler_startNotifier_pargs() throw() {}

  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _workerHandler_startNotifier_result__isset {
  _workerHandler_startNotifier_result__isset() : success(false) {}
  bool success;
} _workerHandler_startNotifier_result__isset;

class workerHandler_startNotifier_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  workerHandler_startNotifier_result() : success(0) {
  }

  virtual ~workerHandler_startNotifier_result() throw() {}

  int32_t success;

  _workerHandler_startNotifier_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const workerHandler_startNotifier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const workerHandler_startNotifier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workerHandler_startNotifier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _workerHandler_startNotifier_presult__isset {
  _workerHandler_startNotifier_presult__isset() : success(false) {}
  bool success;
} _workerHandler_startNotifier_presult__isset;

class workerHandler_startNotifier_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~workerHandler_startNotifier_presult() throw() {}

  int32_t* success;

  _workerHandler_startNotifier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class workerHandlerClient : virtual public workerHandlerIf {
 public:
  workerHandlerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  workerHandlerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void getLog(std::string& _return, const std::string& filename, const int32_t type, const std::string& lines);
  void send_getLog(const std::string& filename, const int32_t type, const std::string& lines);
  void recv_getLog(std::string& _return);
  int32_t isFileExist(const std::string& filename);
  void send_isFileExist(const std::string& filename);
  int32_t recv_isFileExist();
  int32_t startNotifier(const std::string& filename);
  void send_startNotifier(const std::string& filename);
  int32_t recv_startNotifier();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class workerHandlerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<workerHandlerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (workerHandlerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isFileExist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startNotifier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  workerHandlerProcessor(boost::shared_ptr<workerHandlerIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &workerHandlerProcessor::process_ping;
    processMap_["getLog"] = &workerHandlerProcessor::process_getLog;
    processMap_["isFileExist"] = &workerHandlerProcessor::process_isFileExist;
    processMap_["startNotifier"] = &workerHandlerProcessor::process_startNotifier;
  }

  virtual ~workerHandlerProcessor() {}
};

class workerHandlerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  workerHandlerProcessorFactory(const ::boost::shared_ptr< workerHandlerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< workerHandlerIfFactory > handlerFactory_;
};

class workerHandlerMultiface : virtual public workerHandlerIf {
 public:
  workerHandlerMultiface(std::vector<boost::shared_ptr<workerHandlerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~workerHandlerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<workerHandlerIf> > ifaces_;
  workerHandlerMultiface() {}
  void add(boost::shared_ptr<workerHandlerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void getLog(std::string& _return, const std::string& filename, const int32_t type, const std::string& lines) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLog(_return, filename, type, lines);
    }
    ifaces_[i]->getLog(_return, filename, type, lines);
    return;
  }

  int32_t isFileExist(const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isFileExist(filename);
    }
    return ifaces_[i]->isFileExist(filename);
  }

  int32_t startNotifier(const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startNotifier(filename);
    }
    return ifaces_[i]->startNotifier(filename);
  }

};

} // namespace

#endif
